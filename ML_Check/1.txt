MLOPS 1

Here’s the simplest end‑to‑end walk‑through for setting up Git/GitHub for a toy ML project, uploading a sample dataset, and collaborating:

---

## 1. Create the GitHub repository

You can do this either via the GitHub web UI or the GitHub CLI.  
**Via web UI**  
1. Go to GitHub → **New repository**  
2. Name: `ml-project`  
3. Description: “Basic ML project with dataset”  
4. **Initialize** with: ❏ README (leave unchecked for CLI example below)  
5. Click **Create repository**

**Via GitHub CLI**  
```bash
# if you haven’t yet authenticated with gh: 
#   gh auth login
gh repo create YOUR_USERNAME/ml-project \
  --public \
  --description "Basic ML project with sample dataset" \
  --confirm
```

---

## 2. Clone locally & initialize

```bash
# 1. Clone (or if you initialized locally, skip git clone and cd into your folder)
git clone https://github.com/YOUR_USERNAME/ml-project.git
cd ml-project

# 2. If you didn’t initialize with a README on GitHub:
git init
```

---

## 3. Add a README

Create `README.md` with minimal info:

```markdown
# ML‑Project

This is a toy machine‑learning project to demonstrate Git/GitHub version control.

## Project structure

```
ml-project/
├── data/
│   └── sample.csv
├── src/
│   └── train.py
└── README.md
```

## How to use

1. `pip install -r requirements.txt`  
2. `python src/train.py`
```

Save that file and stage it:

```bash
git add README.md
git commit -m "Add project README"
```

---

## 4. Upload a sample dataset

1. Create a `data/` folder:
   ```bash
   mkdir data
   ```
2. Add a tiny CSV, e.g. `data/sample.csv`:
   ```csv
   feature1,feature2,label
   0.1,1.2,0
   0.4,0.8,1
   0.3,1.0,0
   ```
3. Stage & commit:
   ```bash
   git add data/sample.csv
   git commit -m "Add sample dataset"
   ```

---

## 5. Push your changes

Set the remote (if you did a local `git init`) and push:

```bash
# Only needed if you ran `git init` yourself
git remote add origin https://github.com/YOUR_USERNAME/ml-project.git

# Push your current branch (usually main)
git branch -M main
git push -u origin main
```

---

## 6. Collaborate

1. **Add a collaborator**  
   - On GitHub, go to **Settings → Manage access → Invite collaborator**  
   - Enter their GitHub username, click **Add**.
2. **Collaborator workflow**  
   ```bash
   # collaborator clones
   git clone https://github.com/YOUR_USERNAME/ml-project.git
   cd ml-project

   # create a feature branch
   git checkout -b add-preprocessing

   # make changes, e.g., add src/preprocess.py
   git add src/preprocess.py
   git commit -m "Add data preprocessing script"

   # push branch & open a PR
   git push -u origin add-preprocessing
   ```
3. You review their Pull Request (PR) on GitHub, merge it, and then everyone does:
   ```bash
   git checkout main
   git pull
   ```

---

## 7. Summary of key commands

```bash
# Local setup
git init
git add .
git commit -m "Initial commit"

# Remote linkage & push
git remote add origin GIT_URL
git branch -M main
git push -u origin main

# Collaboration
git checkout -b feature-branch
# …edit, then
git add .
git commit -m "Describe changes"
git push -u origin feature-branch
# Open PR on GitHub, review, merge, then:
git checkout main
git pull
```

That’s it—your ML project is now under version control, with a dataset, README, and collaboration workflow all set up!