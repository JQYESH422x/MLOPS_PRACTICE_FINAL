MLOPS 5

Here’s a simple and complete implementation for the **Exploratory Data Analysis (EDA) and Report Generation** MLOps practical using the **Iris dataset**, without using virtual environments:

---

### **1. Load Dataset and Basic Info**

```python
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Load Iris dataset
from sklearn.datasets import load_iris
iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['target'] = iris.target

# Basic info
print(df.info())
print(df.describe())
print(df.isnull().sum())
```

---

### **2. Visualizations (Distributions, Correlations, Outliers)**

#  Import libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris

# Load and prepare dataset
iris = load_iris()
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df['target'] = iris.target

# 🔁 Map target numbers to species names
df['species'] = df['target'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})

# Basic info
print("Dataset Info:")
print(df.info())
print("\nBasic Statistics:")
print(df.describe())

# Null values check
print("\nNull Values:\n", df.isnull().sum())

visualize 
# Pairplot (shows distribution and class separability)
sns.pairplot(df, hue='species')
plt.suptitle("Feature Distributions by Species", y=1.02)
plt.tight_layout()
plt.show()

# Correlation Heatmap
sns.heatmap(df.drop(columns='target').corr(), annot=True, cmap='Blues')
plt.title("Feature Correlation Heatmap")
plt.tight_layout()
plt.show()

# Boxplot to detect outliers
df.drop("target",axis=1).plot(kind='box', subplots=True, figsize=(10,6))
plt.suptitle("Boxplot for Outlier Detection")
plt.tight_layout()
plt.show()

# IQR method for outlier removal
def remove_outliers_iqr(df, columns):
    clean_df = df.copy()
    for col in columns:
        Q1 = clean_df[col].quantile(0.25)
        Q3 = clean_df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower = Q1 - 1.5 * IQR
        upper = Q3 + 1.5 * IQR
        before = clean_df.shape[0]
        clean_df = clean_df[(clean_df[col] >= lower) & (clean_df[col] <= upper)]
        after = clean_df.shape[0]
        print(f"{col}: Removed {before - after} outliers")
    return clean_df

# Check and remove outliers from numeric columns
numeric_cols = iris.feature_names
df_cleaned = remove_outliers_iqr(df, numeric_cols)

# Boxplot after cleaning
df_cleaned[numeric_cols].plot(kind='box', subplots=True, layout=(2, 2), figsize=(10, 6), title="Boxplots After Outlier Removal")
plt.tight_layout()
plt.show()



---

### **3. Export EDA Report as PDF (using nbconvert)**

1. Save all this code in a **Jupyter notebook** (e.g., `iris_eda.ipynb`)
2. Run this command in your terminal to export it as PDF:

```bash
jupyter nbconvert --to pdf iris_eda.ipynb
```

(Install LaTeX if it throws an error. Or alternatively, you can export to **HTML** and convert that to PDF manually.)
----------------

or
!pip install ydata-profiling
from ydata_profiling import ProfileReport

# Create the profiling report
profile = ProfileReport(df, title="Iris Dataset Profiling Report", explorative=True)

# Export to HTML (easiest to view and print to PDF)
profile.to_file("iris_eda_report.html")

# Optional: Export to PDF (requires LaTeX installed)
# profile.to_file("iris_eda_report.pdf")


---

### **4. Git Commands to Upload to GitHub**

From your project directory (where `.ipynb` and `outputs/` are):

```bash
git add .
git commit -m "Add EDA notebook and PDF report"
git push origin main
```

---

###  Suggested Folder Structure:

```
iris-eda/
├── iris_eda.ipynb
├── iris_eda.pdf
├── outputs/
│   ├── pairplot.png
│   ├── correlation_heatmap.png
│   └── boxplot.png
└── README.md
```

Let me know if you want me to create the full notebook code for copy-paste or need help converting the file to PDF.