DL 4

import tensorflow as tf
from tensorflow.keras import Sequential
from tensorflow.keras import layers,models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical

# load data
(X_train,y_train),(X_test,y_test)=mnist.load_data()

# normalize data
X_train=X_train/255.0
X_test=X_test/255.0

print(len(X_train))
print(len(X_test))
print(len(y_train))
print(len(y_test))

import matplotlib.pyplot as plt
plt.imshow(X_train[0])
print("The label of image:",y_train[0])
plt.show()

# Reshape the data to (batch_size, height, width, channels) for CNN input
X_train=X_train.reshape(-1,28,28,1)
X_test=X_test.reshape(-1,28,28,1)

# one hot encoding
y_train=to_categorical(y_train,10)
y_test=to_categorical(y_test,10)

# Build a model
model=models.Sequential([
    layers.Conv2D(32,(3,3),activation="relu",input_shape=(28,28,1)),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64,(3,3),activation="relu"),
    layers.MaxPooling2D((2,2)),

    layers.Conv2D(64, (3,3) , activation="relu"),
    layers.Flatten(),

    layers.Dense(64,activation="relu"),
    layers.Dense(10,activation="softmax")
])

# Model compiling
model.compile(optimizer="adam",loss="categorical_crossentropy",metrics=["accuracy"])

# model training
history=model.fit(X_train,y_train,epochs=5,batch_size=64,validation_data=(X_test,y_test))

# model eval
loss,accuracy=model.evaluate(X_test,y_test)
print("Loss :",loss)
print("Accuracy :",accuracy)

y_pred=model.predict(X_test)

import numpy as np
plt.imshow(X_test[0])
print("Label :",np.argmax(y_pred[0]))
