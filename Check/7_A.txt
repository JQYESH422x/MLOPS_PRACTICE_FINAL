DL 7B (Weather)

import numpy as np
import pandas as pd
import tensorflow as tf

from tensorflow.keras import Sequential
from tensorflow.keras.layers import GRU, LSTM, Dense
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split

### data loading
url = httpsraw.githubusercontent.comdatasetsfinance-vixmasterdatavix-daily.csv
df = pd.read_csv(url)
df[CLOSE].describe()
df.DATE.describe()

### data preprocessing
df.head(3)
df.info()
df[DATE] = pd.to_datetime(df[DATE])
df.head(3)
data = df[[CLOSE]].values

### scaling
scaler = MinMaxScaler(feature_range=(0,1))
data_scaled = scaler.fit_transform(data)

def create_sequences(data, seq_length=10)
    X, y = [], []
    for i in range(len(data) - seq_length)
        X.append(data[ii+seq_length])
        y.append(data[i+seq_length])
    return np.array(X), np.array(y)

seq_length = 20
X, y = create_sequences(data_scaled, seq_length)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(y_test.shape)

### lstm model building
model_lstm = Sequential([
    LSTM(50, return_sequences=True, input_shape=(seq_length, 1)),
    LSTM(50, return_sequences=False),
    Dense(25, activation=relu),
    Dense(1, activation=linear)
])

### model compile
model_lstm.compile(optimizer=adam, loss=[mse])

### mmodel fiting
history_lstm = model_lstm.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

### GRU model building
model_gru = Sequential([
    GRU(50, return_sequences=True, input_shape=(seq_length, 1)),
    GRU(50, return_sequences=False),
    Dense(25, activation=relu),
    Dense(1, activation=linear)
])

### compile model
model_gru.compile(optimizer=adam, loss=mse)

### model fiting
history_gru = model_gru.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))

### model eval
predicted_lstm = model_lstm.predict(X_test)
predicted_lstm = scaler.inverse_transform(predicted_lstm)

predicted_gru = model_gru.predict(X_test)
predicted_gru = scaler.inverse_transform(predicted_gru)

actual_prices = scaler.inverse_transform(y_test)

### ploting
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))

# LSTM Forecast
plt.subplot(1,2,1)
plt.plot(actual_prices, label=Actual)
plt.plot(predicted_lstm, label=Predicted, color=red)
plt.title(LSTM Forecasting)
plt.xlabel(Time (Days))
plt.ylabel(Closing Price)
plt.grid()
plt.legend()

# GRU Forecast
plt.subplot(1,2,2)
plt.plot(actual_prices, label=Actual)
plt.plot(predicted_gru, label=Predicted, color=red)
plt.title(GRU Forecasting)
plt.xlabel(Time (Days))
plt.ylabel(Closing Price)
plt.grid()
plt.legend()

plt.tight_layout()
plt.show()
